% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynamics_sweq.R
\name{sweq_simulate}
\alias{sweq_simulate}
\title{Simulate from the modified SWEQ model}
\usage{
sweq_simulate(duration, freq, ndim, umean = 0, unoise = FALSE, topo = 1,
  noiseswitch = 1, kh = 25000, ku = kh, kr = 200, noisefreq = 1,
  thres.rain = 0.005, sigr = 0.0025, sigu = 0.01, alpha = 1/4000,
  beta = 3, norain = TRUE, aircraft = 0, rgauss = FALSE,
  R.sigr = sigr, R.sigu = sigu, seed = sample.int(1000, 1), hc = 90.02,
  hr = 90.4, state0 = NA)
}
\arguments{
\item{duration}{the total integration time}

\item{freq}{the frequency at which the process is recorded and observed}

\item{ndim}{dimension of the 1-dim domain}

\item{umean}{Initial wind field}

\item{topo}{1=nothing, 2=one mountain, 3=5mountains}

\item{kh, ku, kr}{diffusion parameters}

\item{thres.rain}{threshold over which rain is observed}

\item{sigr, sigu}{standard deviation of r and u observations}

\item{alpha, }{beta model parameters}

\item{R.sigr, }{R.sigu are used to create the R matrix (not necessarily equal to sigr and sigu)}

\item{seed}{random seed (pass as NA if set externally)}

\item{hc, hr}{critical heights for clouds and rain formation}

\item{state0}{possible initial state at time 0}

\item{unoise:}{TRUE/FALSE  wind perturbation}

\item{noiseswitch=1}{for adding random plumes}

\item{noisefreq=1}{probability of random plume at each integration cycle}

\item{norain:}{should no-rain observations be created}
}
\value{
a list with everything needed for assimilation and plotting
}
\description{
Simulate a time series of states and observations at a given frequency from the modified SWEQ
model. The parameters and options follow the original implementation of the author
in Python. Here the model is implemented in fortran90 for better performance.
}
\examples{
ndim <- 300
freq <- 60
duration <- 12*freq
kh <- 25000; ku<- 25000; kr<- 200
alpha <- 1/4000; beta <- 3; hr <- 90.4; hc <- 90.02
train <- 0.005;
sigr <- 0.1
sigu <- 0.0025
R.sigu <- sigu
R.sigr <- 0.025
norain <- TRUE ## TRUE=assimilate norain observations
set.seed(1)
sweq_run <- sweq_simulate(duration, freq, ndim,
                          alpha=alpha, beta=beta,
                          noisefreq = 1, umean = 0,
                          hr=hr, hc=hc,
                          sigr=sigr, sigu=sigu,
                          R.sigr=R.sigr, R.sigu=R.sigu,
                          norain=norain,
                          thres.rain=train)
sweq_ggplot(sweq_run$state.ts[1,], obs=sweq_run$y.ts[[1]])
}
